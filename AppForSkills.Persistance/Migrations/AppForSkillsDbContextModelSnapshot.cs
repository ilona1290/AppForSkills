// <auto-generated />
using System;
using AppForSkills.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppForSkills.Persistance.Migrations
{
    [DbContext(typeof(AppForSkillsDbContext))]
    partial class AppForSkillsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AchievementUser", b =>
                {
                    b.Property<int>("AchievementsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersWithAchivementId")
                        .HasColumnType("int");

                    b.HasKey("AchievementsId", "UsersWithAchivementId");

                    b.HasIndex("UsersWithAchivementId");

                    b.ToTable("AchievementUser");

                    b.HasData(
                        new
                        {
                            AchievementsId = 1,
                            UsersWithAchivementId = 1
                        },
                        new
                        {
                            AchievementsId = 11,
                            UsersWithAchivementId = 2
                        },
                        new
                        {
                            AchievementsId = 16,
                            UsersWithAchivementId = 1
                        },
                        new
                        {
                            AchievementsId = 16,
                            UsersWithAchivementId = 2
                        });
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Achievement");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1,
                            Category = "Skills",
                            Description = "Dodano pierwszy SkillPost",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Początkujący Skiller",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 5,
                            Category = "Skills",
                            Description = "Dodano 5 SkillPost'ów",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Szał umiejętności",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 10,
                            Category = "Skills",
                            Description = "Dodano 10 SkillPost'ów",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "SkillMaster",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 15,
                            Category = "Skills",
                            Description = "Dodano 15 SkillPost'ów",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Co za utalentowana bestia",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            Amount = 25,
                            Category = "Skills",
                            Description = "Dodano 25 SkillPost'ów",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "SkillGod",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            Amount = 5,
                            Category = "Komentarze",
                            Description = "Dodano 5 Komentarzy",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Coś tam sobie pomamrocze",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            Amount = 25,
                            Category = "Komentarze",
                            Description = "Dodano 25 Komentarzy",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Buszujący w komentarzach",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 8,
                            Amount = 50,
                            Category = "Komentarze",
                            Description = "Dodano 50 Komentarzy",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Komentator-niekoniecznie-sportowy",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 9,
                            Amount = 100,
                            Category = "Komentarze",
                            Description = "Dodano 100 Komentarzy",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Imperator-komentator",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 10,
                            Amount = 125,
                            Category = "Komentarze",
                            Description = "Dodano 125 Komentarzy",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Mógłby/Mogłaby napisać książkę, ale pisze komentarze",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 11,
                            Amount = 1,
                            Category = "Oceny",
                            Description = "Oceniono pierwszy SkillPost",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Dam Ci gwiazdkę z nieba",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 12,
                            Amount = 5,
                            Category = "Oceny",
                            Description = "Oceniono 5 SkillPost'ów",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Taniec z gwiazdami",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 13,
                            Amount = 15,
                            Category = "Oceny",
                            Description = "Oceniono 15 SkillPost'ów",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Mówcie mi StarLord",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 14,
                            Amount = 25,
                            Category = "Oceny",
                            Description = "Oceniono 25 SkillPost'ów",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Mamo, możemy mieć własną konstelacje w domu?",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 15,
                            Amount = 50,
                            Category = "Oceny",
                            Description = "Oceniono 50 SkillPost'ów",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Dał/Dała tyle gwiazdek, że może nakręcić własny teledysk Shooting Stars",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 16,
                            Amount = 1,
                            Category = "Dyskusje",
                            Description = "Dołączono do pierwszej dyskusji",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Chcę coś oznajmić",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 17,
                            Amount = 5,
                            Category = "Dyskusje",
                            Description = "Dołączono do 5 dyskusji",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Zawsze musi być jakieś ALE",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 18,
                            Amount = 25,
                            Category = "Dyskusje",
                            Description = "Dołączono do 25 dyskusji",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Naczelny Gaduła",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 19,
                            Amount = 50,
                            Category = "Dyskusje",
                            Description = "Dołączono do 50 dyskusji",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Dyskutant-Alfa",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 20,
                            Amount = 100,
                            Category = "Dyskusje",
                            Description = "Dołączono do 100 dyskusji",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Crushin' discussion",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 21,
                            Amount = 5,
                            Category = "Posty w dyskusjach",
                            Description = "Udzielono się 5 razy w dyskusjach",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Ja tu tylko dyskutuję",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 22,
                            Amount = 15,
                            Category = "Posty w dyskusjach",
                            Description = "Udzielono się 15 razy w dyskusjach",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Mam coś więcej do powiedzenia niż tylko ALE",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 23,
                            Amount = 25,
                            Category = "Posty w dyskusjach",
                            Description = "Udzielono się 25 razy w dyskusjach",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Prowadzący Talk-Show",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 24,
                            Amount = 50,
                            Category = "Posty w dyskusjach",
                            Description = "Udzielono się 50 razy w dyskusjach",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "Nie zwrócimy Ci czasu jaki spędziłeś na pisaniu tych postów",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 25,
                            Amount = 200,
                            Category = "Posty w dyskusjach",
                            Description = "Udzielono się 200 razy w dyskusjach",
                            Logo = "https://appforskills1.blob.core.windows.net/achivement-logos/logo1.jpg",
                            Name = "200 postów już gotowych, milion kolejnych w drodze...",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MainParentCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("SkillPostId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentText = "Wow! Super zdjęcie.",
                            Created = new DateTime(2022, 4, 2, 23, 31, 59, 575, DateTimeKind.Local).AddTicks(1599),
                            CreatedBy = "Turysta12",
                            SkillPostId = 1,
                            StatusId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CommentText = "Dzięki.",
                            Created = new DateTime(2022, 4, 2, 23, 31, 59, 575, DateTimeKind.Local).AddTicks(2134),
                            CreatedBy = "Podróżnik",
                            MainParentCommentId = 1,
                            ParentCommentId = 1,
                            SkillPostId = 1,
                            StatusId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstPost")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discussions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 4, 2, 23, 31, 59, 575, DateTimeKind.Local).AddTicks(5664),
                            CreatedBy = "Podróżnik",
                            FirstPost = "Jaki kraj chcielibyście odwiedzić?",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<int?>("PostInDiscussionId")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("PostInDiscussionId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentId = 1,
                            User = "Podróżnik"
                        },
                        new
                        {
                            Id = 2,
                            CommentId = 2,
                            User = "Turysta12"
                        },
                        new
                        {
                            Id = 3,
                            DiscussionId = 1,
                            User = "Podróżnik"
                        },
                        new
                        {
                            Id = 4,
                            DiscussionId = 1,
                            User = "Turysta12"
                        },
                        new
                        {
                            Id = 5,
                            PostInDiscussionId = 1,
                            User = "Podróżnik"
                        },
                        new
                        {
                            Id = 6,
                            PostInDiscussionId = 3,
                            User = "Podróżnik"
                        });
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.PostInDiscussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MainParentPostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentPostId")
                        .HasColumnType("int");

                    b.Property<string>("PostText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Reported")
                        .HasColumnType("bit");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("UserId");

                    b.ToTable("PostsInDiscussion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 4, 2, 23, 31, 59, 575, DateTimeKind.Local).AddTicks(7133),
                            CreatedBy = "Turysta12",
                            DiscussionId = 1,
                            PostText = "Australia",
                            Reported = false,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 4, 2, 23, 31, 59, 575, DateTimeKind.Local).AddTicks(7150),
                            CreatedBy = "Podróżnik",
                            DiscussionId = 1,
                            MainParentPostId = 1,
                            ParentPostId = 1,
                            PostText = "Dlaczego?",
                            Reported = false,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 4, 2, 23, 31, 59, 575, DateTimeKind.Local).AddTicks(7568),
                            CreatedBy = "Turysta12",
                            DiscussionId = 1,
                            MainParentPostId = 1,
                            ParentPostId = 2,
                            PostText = "@Podróżnik Ponieważ zawsze podróżowałem po Europie i chciałbym czegoś nowego :).",
                            Reported = false,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillPostId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 4, 2, 23, 31, 59, 575, DateTimeKind.Local).AddTicks(3039),
                            CreatedBy = "Turysta12",
                            SkillPostId = 1,
                            StatusId = 1,
                            UserId = 2,
                            Value = 5
                        });
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.SkillPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressOfPhotoOrVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SkillPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressOfPhotoOrVideo = "https://app.blob.core.windows.net/upload-container/Eiffel_Tower.jpg",
                            Created = new DateTime(2022, 4, 2, 23, 31, 59, 568, DateTimeKind.Local).AddTicks(5687),
                            CreatedBy = "Podróżnik",
                            Description = "Cześć. Autorskie zdjęcie wieży Eiffla",
                            StatusId = 1,
                            Title = "Wieża Eiffla",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RecentLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RecentLoginDate = new DateTime(2022, 4, 2, 23, 31, 59, 576, DateTimeKind.Local).AddTicks(480),
                            RegistrationDate = new DateTime(2022, 4, 2, 23, 31, 59, 576, DateTimeKind.Local).AddTicks(255),
                            StatusId = 1,
                            Username = "Podróżnik"
                        },
                        new
                        {
                            Id = 2,
                            RecentLoginDate = new DateTime(2022, 4, 2, 23, 31, 59, 576, DateTimeKind.Local).AddTicks(681),
                            RegistrationDate = new DateTime(2022, 4, 2, 23, 31, 59, 576, DateTimeKind.Local).AddTicks(675),
                            StatusId = 1,
                            Username = "Turysta12"
                        });
                });

            modelBuilder.Entity("DiscussionUser", b =>
                {
                    b.Property<int>("DiscussionsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersInDiscussionId")
                        .HasColumnType("int");

                    b.HasKey("DiscussionsId", "UsersInDiscussionId");

                    b.HasIndex("UsersInDiscussionId");

                    b.ToTable("DiscussionUser");

                    b.HasData(
                        new
                        {
                            DiscussionsId = 1,
                            UsersInDiscussionId = 1
                        },
                        new
                        {
                            DiscussionsId = 1,
                            UsersInDiscussionId = 2
                        });
                });

            modelBuilder.Entity("AchievementUser", b =>
                {
                    b.HasOne("AppForSkills.Domain.Entities.Achievement", null)
                        .WithMany()
                        .HasForeignKey("AchievementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppForSkills.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersWithAchivementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.Comment", b =>
                {
                    b.HasOne("AppForSkills.Domain.Entities.SkillPost", "SkillPost")
                        .WithMany("Comments")
                        .HasForeignKey("SkillPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppForSkills.Domain.Entities.User", "User")
                        .WithMany("UserComments")
                        .HasForeignKey("UserId");

                    b.Navigation("SkillPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.Like", b =>
                {
                    b.HasOne("AppForSkills.Domain.Entities.Comment", "Commment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId");

                    b.HasOne("AppForSkills.Domain.Entities.Discussion", "Discussion")
                        .WithMany("Likes")
                        .HasForeignKey("DiscussionId");

                    b.HasOne("AppForSkills.Domain.Entities.PostInDiscussion", "PostInDiscussion")
                        .WithMany("Likes")
                        .HasForeignKey("PostInDiscussionId");

                    b.Navigation("Commment");

                    b.Navigation("Discussion");

                    b.Navigation("PostInDiscussion");
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.PostInDiscussion", b =>
                {
                    b.HasOne("AppForSkills.Domain.Entities.Discussion", "Discussion")
                        .WithMany("PostsInDiscussion")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppForSkills.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.Rating", b =>
                {
                    b.HasOne("AppForSkills.Domain.Entities.SkillPost", "SkillPost")
                        .WithMany("Ratings")
                        .HasForeignKey("SkillPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppForSkills.Domain.Entities.User", "User")
                        .WithMany("GavedRatings")
                        .HasForeignKey("UserId");

                    b.Navigation("SkillPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.SkillPost", b =>
                {
                    b.HasOne("AppForSkills.Domain.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscussionUser", b =>
                {
                    b.HasOne("AppForSkills.Domain.Entities.Discussion", null)
                        .WithMany()
                        .HasForeignKey("DiscussionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppForSkills.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersInDiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.Discussion", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("PostsInDiscussion");
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.PostInDiscussion", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.SkillPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("AppForSkills.Domain.Entities.User", b =>
                {
                    b.Navigation("GavedRatings");

                    b.Navigation("UserComments");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
