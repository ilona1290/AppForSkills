@page "/skillPosts/{Id:int}"
@using AppForSkills.Client.Models
@using System.Text.Json
@using System.Text
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="page">
    <AuthorizeView>
        <Authorized Context="Auth">
            @if (skillPost == null)
            {
                <p>Wczytywanie...</p>
            }
            else
            {
                <div class="row">
                    <div>
                        <h5 class="rating">Ocena: @skillPost.Rating</h5>
                        <a href="/skillPosts/@skillPost.Id/ratings" class="btn btn-warning">Pokaż oceny</a>
                        <button @onclick="Rate" class="btn btn-danger">Oceń</button>
                        <div class="buttons">
                            @if (ShowRatingButtons)
                            {
                                <button class="btn btn-success" @onclick="() => AddRate(1)">1</button>
                                <button class="btn btn-success" @onclick="() => AddRate(2)">2</button>
                                <button class="btn btn-success" @onclick="() => AddRate(3)">3</button>
                                <button class="btn btn-success" @onclick="() => AddRate(4)">4</button>
                                <button class="btn btn-success" @onclick="() => AddRate(5)">5</button>
                            }
                        </div>
                        <a href="/skillPosts" class="back">Powrót</a>
                    </div>
                    
                   
                </div>

                <h5>Tytuł: @skillPost.Title</h5>
                <h5>Opis: @skillPost.Description</h5>
                <h8>Data publikacji: @skillPost.PublishingDate</h8><br />
                @if (skillPost.AddressOfPhotoOrVideo.EndsWith(".png") || skillPost.AddressOfPhotoOrVideo.EndsWith(".jpg"))
                {
                    <img src=@skillPost.AddressOfPhotoOrVideo style="display: block; max-width: 550px; height: auto; " />
                }
                else if (skillPost.AddressOfPhotoOrVideo.EndsWith(".mp4"))
                {
                    <video preload="auto" controls="controls" width="800" height="400">
                        <source src=@skillPost.AddressOfPhotoOrVideo type="video/mp4" />
                    </video>
                }
                <h4>Autor: @skillPost.Username</h4><br /><br />

                <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit" @onreset="@HandleReset">
                    <DataAnnotationsValidator />
                    <div class="addComment">
                        <label>Dodaj komentarz:</label>
                        <InputTextArea @bind-Value="@model.CommentText" class="form-control" />
                        <ValidationMessage For="@(() => model.CommentText)" />
                    </div>
                    <button type="submit" class="btn btn-primary">Dodaj</button>
                    <button type="reset" class="btn btn-dark">Wyczyść</button>
                </EditForm>
                <br /><br />
                <h4>Komentarze: </h4>
                @foreach (var comment in skillPost.Comments)
                {
                    if (Comments.Contains(comment))
                    {
                        <div class="comments">
                            <div class="autorCom">@comment.Username </div>
                            <div class="dateCom">@comment.Date</div><br />
                            <div>@comment.CommentText</div>
                            <button @onclick="() => Answer(comment)" class="answerLink">Odpowiedz</button>
                        </div><br />
                        @if (comment.ShowAnswerField)
                        {
                            <EditForm EditContext="@editContextToAnswer" OnValidSubmit="() => HandleValidSubmitAnswerComment(comment)" @onreset="@HandleResetToAnswer">
                                <DataAnnotationsValidator />
                                <div class="addAnswerComment">
                                    <label>Odpowiedz:</label>
                                    <InputTextArea @bind-Value="@modelToAnswer.CommentText" class="form-control"/>
                                    <ValidationMessage For="@(() => modelToAnswer.CommentText)" />
                                    <button type="submit" class="btn btn-primary">Dodaj</button>
                                    <button type="reset" class="btn btn-dark">Wyczyść</button>
                                    <button @onclick="() => Answer(comment)" class="btn btn-light">Anuluj</button>
                                </div><br />
                            </EditForm>
                        }
                        @foreach (var answerCom in AnswersToComment)
                        {
                            if (answerCom.ParentCommentId == comment.Id)
                            {
                                <div class="answerToCom">
                                    <div class="autorCom">@answerCom.Username </div>
                                    <div class="dateCom">@answerCom.Date</div><br />
                                    <div>@answerCom.CommentText</div>
                                </div><br />
                            }
                        }
                    }
                }

            }

        </Authorized>
        <NotAuthorized>
            <p>Nie można wyświetlić strony niezalogowanym użytkownikom</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private SkillPostVm skillPost;
    private List<CommentDto> AnswersToComment = new List<CommentDto>();
    private List<CommentDto> Comments = new List<CommentDto>();
    private CommentForm model = new CommentForm();
    private CommentForm modelToAnswer = new CommentForm();
    private RatingForm modelToRating = new RatingForm();
    private EditContext editContext;
    private EditContext editContextToAnswer;
    private bool ShowRatingButtons { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        skillPost = await Http.GetFromJsonAsync<SkillPostVm>($"api/posts/{Id}");
        @foreach (var comment in skillPost.Comments)
        {
            if (comment.ParentCommentId != null)
            {
                AnswersToComment.Add(comment);
            }
            else
            {
                Comments.Add(comment);
            }
        }
        editContext = new EditContext(model);
        editContextToAnswer = new EditContext(modelToAnswer);
    }

    private async void HandleValidSubmit()
    {
        model.SkillPostId = Id;
        model.ParentCommentId = null;
        var modelJson = JsonSerializer.Serialize(model, new JsonSerializerOptions { WriteIndented = true });
        var content = new StringContent(modelJson, Encoding.UTF8, "application/json");
        await Http.PostAsync($"api/posts/{Id}/comments", content);
        NavigationManager.NavigateTo($"/skillPosts/{Id}", forceLoad: true);
    }

    private async void HandleValidSubmitAnswerComment(CommentDto com)
    {
        modelToAnswer.SkillPostId = Id;
        modelToAnswer.ParentCommentId = com.Id;
        var modelJson = JsonSerializer.Serialize(modelToAnswer, new JsonSerializerOptions { WriteIndented = true });
        var content = new StringContent(modelJson, Encoding.UTF8, "application/json");
        await Http.PostAsync($"api/posts/{Id}/comments", content);
        NavigationManager.NavigateTo($"/skillPosts/{Id}", forceLoad: true);
    }

    private async void AddRate(int rate)
    {
        modelToRating.SkillPostId = Id;
        modelToRating.Value = rate;
        var modelJson = JsonSerializer.Serialize(modelToRating, new JsonSerializerOptions { WriteIndented = true });
        var content = new StringContent(modelJson, Encoding.UTF8, "application/json");
        await Http.PostAsync($"api/posts/{Id}", content);
        NavigationManager.NavigateTo($"/skillPosts/{Id}", forceLoad: true);
    }

    private void HandleReset()
    {
        model = new CommentForm();
        editContext = new EditContext(model);
    }

    private void HandleResetToAnswer()
    {
        modelToAnswer = new CommentForm();
        editContextToAnswer = new EditContext(modelToAnswer);
    }


    private void Answer(CommentDto com)
    {
        if(!com.ShowAnswerField)
        {
            com.ShowAnswerField = true;
        }
        else
        {
            com.ShowAnswerField = false;
        }
    }

    private void Rate()
    {
        if (!ShowRatingButtons) ShowRatingButtons = true;
        else ShowRatingButtons = false;
    }

}

