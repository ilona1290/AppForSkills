@page "/skillPosts/{Id:int}/EditSkillPost"
@using AppForSkills.Client.Models
@using System.Text
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<div class="page">
    <AuthorizeView>
        <Authorized Context="Auth">
            <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" @onreset="@HandleReset">
                <DataAnnotationsValidator />
                <div class="form-row">
                    <label>Tytuł</label>
                    <InputText @bind-Value="@model.Title" class="form-control" />
                    <ValidationMessage For="@(() => model.Title)" />
                </div>
                <div class="form-row">
                    <label>Opis</label>
                    <InputTextArea @bind-Value="@model.Description" class="form-control" />
                    <ValidationMessage For="@(() => model.Description)" />
                </div>
                <br />
                <div>
                    <InputFile id="fileInput" OnChange="@HandleSelected" hidden multiple />
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               StartIcon="@Icons.Filled.Image"
                               for="fileInput">
                        @name plik
                    </MudButton>
                    <ValidationMessage For="@(() => model.Skill)" />
                    <div>
                        <br /><br />
                        @if (DoSent)
                        {
                            @if (FileUrl == null)
                            {
                                <MudCard Style="width: 500px; background: linear-gradient(90deg, rgba(9,122,227,0.9) 46%, rgba(4,170,242,1) 100%);">
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" />
                                    <MudCardContent>
                                        <MudSkeleton Width="30%" Height="42px;" />
                                        <MudSkeleton Width="80%" />
                                        <MudSkeleton Width="100%" />
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                                        <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                                    </MudCardActions>
                                    <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
                                        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                                    </MudOverlay>
                                </MudCard>
                            }
                            else
                            {
                                @if (model.Skill.EndsWith(".png") || model.Skill.EndsWith(".jpg"))
                                {
                                    <img src=@FileUrl style="display: block; max-width: 500px; height: auto; " />
                                }
                                else if (model.Skill.EndsWith(".mp4"))
                                {
                                    <video preload="auto" controls="controls" width="500">
                                        <source src=@FileUrl type="video/mp4" />
                                    </video>
                                }
                            }
                        }
                    </div>
                </div>
                <br /><br />
                <button type="submit" class="btn btn-primary">Zatwierdź</button>
                <button type="reset" class="btn btn-danger">Wyczyść</button>
                <a class="btn btn-info" href="skillPosts">Powrót</a>
            </EditForm>
        </Authorized>
        <NotAuthorized>
            <p>Nie można wyświetlić strony niezalogowanym użytkownikom</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private SkillPostVm skillPost;
    public string FileUrl { get; set; }
    public string FileType { get; set; }
    EditSkillPostForm model = new EditSkillPostForm();
    private EditContext editContext;
    private bool isVisible = false;
    private bool DoSent = true;
    private string name = "Zmień";

    protected override async Task OnInitializedAsync()
    {
        skillPost = await Http.GetFromJsonAsync<SkillPostVm>($"api/posts/{Id}");
        model.Id = skillPost.Id;
        model.Title = skillPost.Title;
        model.Description = skillPost.Description;
        model.Skill = skillPost.AddressOfPhotoOrVideo;
        FileUrl = model.Skill;
        editContext = new EditContext(model);
    }

    private async void HandleValidSubmit()
    {
        var modelJson = JsonSerializer.Serialize(model, new JsonSerializerOptions { WriteIndented = true });
        var content = new StringContent(modelJson, Encoding.UTF8, "application/json");
        await Http.PutAsync($"api/posts/{Id}", content);
        Navigation.NavigateTo("/skillPosts");
        Snackbar.Add("SkillPost został pomyślnie zedytowany");
    }

    private void HandleReset()
    {
        model = new EditSkillPostForm();
        editContext = new EditContext(model);
        FileUrl = null;
        DoSent = false;
        name = "Dodaj";
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        DoSent = true;
        name = "Zmień";
        FileUrl = null;
        var file = e.File;
        FileType = file.ContentType;
        if (file == null)
            return;
        using (var ms = file.OpenReadStream(file.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(file.Size)), FileType, file.Name);
            var response = await Http.PostAsync("api/upload", content);
            FileUrl = await response.Content.ReadAsStringAsync();
            model.Skill = FileUrl;
        }
    }
}
