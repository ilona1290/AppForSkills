@page "/discussions"
@using AppForSkills.Client.Models
@using System.Text.Json
@using System.Text
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<div class="page">
    <AuthorizeView>
        <Authorized Context="Auth">
            <a class="btn btn-primary" href="discussions/AddDiscussion">Rozpocznij dyskusję</a><br /><br />

            @foreach (var discussion in discussions)
            {
                <div class="discussions">
                    <h4 class="autorDisc"> Rozpoczynający dyskusję: @discussion.Username</h4>
                    @if (user == discussion.Username)
                    {
                        <div class="buttonDisc"><button class="btn btn-danger" @onclick="() => Delete(discussion.Id)">Usuń</button></div>
                        <div class="buttonDisc"><button class="btn btn-primary" @onclick="() => CreateModelEdit(discussion)">Edytuj</button></div>
                    }
                    <div class="buttonDisc"><a class="btn btn-success" href="discussions/@discussion.Id">Dołącz</a></div>
                    <h4>@discussion.FirstPost</h4>
                    <h4 class="numlikes">&#128077; @discussion.Likes</h4>
                    <h4 class="numPosts">&#128488; @discussion.Posts</h4>
                    <h4 class="numUsers"> &#128483;&#65039;@discussion.Users</h4>
                </div>
                @if (discussion.ShowEditDiscField)
                {
                    <EditForm EditContext="@editContext" OnValidSubmit="EditDiscussion" @onreset="@HandleReset">
                        <DataAnnotationsValidator />
                        <br />
                        <div class="addAnswerComment">
                            <label>Edytuj:</label>
                            <InputTextArea @bind-Value="@modelToEdit.FirstPost" class="form-control" />
                            <ValidationMessage For="@(() => modelToEdit.FirstPost)" />
                            <button type="submit" class="btn btn-primary">Zapisz zmiany</button>
                            <button type="reset" class="btn btn-dark">Wyczyść</button>
                            <button @onclick="() => CreateModelEdit(discussion)" class="btn btn-light">Anuluj</button>
                        </div><br />
                    </EditForm>
                }
                <br />
            }
        </Authorized>
        <NotAuthorized>
            <p>Nie można wyświetlić strony niezalogowanym użytkownikom</p>
        </NotAuthorized>
    </AuthorizeView>
</div>
@code {
    private List<DiscussionDto> discussions { get; set; } = new List<DiscussionDto>();
    private string user { get; set; }
    private EditDiscussionForm modelToEdit = new EditDiscussionForm();
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        ListDiscussions listDisc = new ListDiscussions();
        listDisc = await Http.GetFromJsonAsync<ListDiscussions>("api/discussions");
        discussions = listDisc.Discussions.ToList();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User.Identity.Name;
    }

    private void CreateModelEdit(DiscussionDto disc)
    {
        if (!disc.ShowEditDiscField)
        {
            disc.ShowEditDiscField = true;
            modelToEdit.DiscussionId = disc.Id;
            modelToEdit.FirstPost = disc.FirstPost;
            editContext = new EditContext(modelToEdit);
        }
        else disc.ShowEditDiscField = false;
    }

    private async void EditDiscussion()
    {
        var modelJson = JsonSerializer.Serialize(modelToEdit, new JsonSerializerOptions { WriteIndented = true });
        var content = new StringContent(modelJson, Encoding.UTF8, "application/json");
        await Http.PutAsync($"api/discussions/{modelToEdit.DiscussionId}", content);
        NavigationManager.NavigateTo("/discussions", forceLoad: true);
    }

    private void HandleReset()
    {
        modelToEdit = new EditDiscussionForm();
        editContext = new EditContext(modelToEdit);
    }

    private async void Delete(int idDisc)
    {
        await Http.DeleteAsync($"api/discussions/{idDisc}");
        NavigationManager.NavigateTo("/discussions", forceLoad: true);
    }
}
