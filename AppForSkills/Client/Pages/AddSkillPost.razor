@page "/skillPosts/AddSkillPost"
@using AppForSkills.Client.Models
@using System.Text
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<AuthorizeView>
    <Authorized Context="Auth">
        <h3>Dodaj post</h3>

        <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit" @onreset="@HandleReset">
            <DataAnnotationsValidator />
            <div class="form-row">
                <label>Tytuł</label>
                <InputText @bind-Value="@model.Title" class="form-control" />
                <ValidationMessage For="@(() => model.Title)" />
            </div>
            <div class="form-row">
                <label>Opis</label>
                <InputTextArea @bind-Value="@model.Description" class="form-control" />
                <ValidationMessage For="@(() => model.Description)" />
            </div>
            <br />
            <div>
                <InputFile id="fileInput" OnChange="@HandleSelected" hidden multiple />
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Success"
                           StartIcon="@Icons.Filled.Image"
                           for="fileInput">
                    @name plik
                </MudButton>
                <ValidationMessage For="@(() => model.Skill)" />
                <br /><br />
                <div>
                    @if (DoSent)
                    {
                        @if (FileUrl == null)
                        {
                            <MudCard Style="width: 500px; background: linear-gradient(90deg, rgba(9,122,227,0.9) 46%, rgba(4,170,242,1) 100%);">
                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" />
                                <MudCardContent>
                                    <MudSkeleton Width="30%" Height="42px;" />
                                    <MudSkeleton Width="80%" />
                                    <MudSkeleton Width="100%" />
                                </MudCardContent>
                                <MudCardActions>
                                    <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                                    <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                                </MudCardActions>
                                <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
                                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                                </MudOverlay>
                            </MudCard>
                        }
                        else
                        {

                            @if (FileUrl.EndsWith(".png") || FileUrl.EndsWith(".jpg"))
                            {
                                <img src="@FileUrl" style="display: block; max-width: 500px; height: auto;" />
                            }
                            else if (FileUrl.EndsWith(".mp4"))
                            {
                                <video preload="auto" autoplay controls="controls" width="500">
                                    <source src=@FileUrl type="video/mp4" />
                                </video>
                            }
                        }
                    }
                </div>
            </div>
            <br /><br />
            <button type="submit" class="btn btn-primary">Zatwierdź</button>
            <button type="reset" class="btn btn-danger">Wyczyść</button>
            <a class="btn btn-info" href="skillPosts">Powrót</a>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <p>Nie można wyświetlić strony niezalogowanym użytkownikom</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    public string FileUrl { get; set; }
    public string FileType { get; set; }
    private SkillPostForm model = new SkillPostForm();
    private EditContext editContext;
    private bool isVisible = false;
    private bool DoSent = false;
    private string name = "Dodaj";

    protected override void OnInitialized()
    {
        editContext = new EditContext(model);
    }

    private async void HandleValidSubmit()
    {
        var modelJson = JsonSerializer.Serialize(model, new JsonSerializerOptions { WriteIndented = true });
        var content = new StringContent(modelJson, Encoding.UTF8, "application/json");
        await Http.PostAsync("api/posts", content);
        Navigation.NavigateTo("/skillPosts");
        Snackbar.Add("SkillPost został pomyślnie dodany");
    }

    private void HandleReset()
    {
        model = new SkillPostForm();
        editContext = new EditContext(model);
        FileUrl = null;
        DoSent = false;
        name = "Dodaj";
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        DoSent = true;
        name = "Zmień";
        FileUrl = null;
        var file = e.File;
        FileType = file.ContentType;
        if (file == null)
            return;
        using (var ms = file.OpenReadStream(file.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(file.Size)), FileType, file.Name);
            var response = await Http.PostAsync("api/upload/skillPost", content);
            FileUrl = await response.Content.ReadAsStringAsync();
            model.Skill = FileUrl;
        }
    }
}
