@page "/users/{Username}"
@using AppForSkills.Client.Models
@using AppForSkills.Client.Components
@using System.Text.Json
@using System.Text
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject ISnackbar Snackbar

<div class="page">
    <AuthorizeView>
        <Authorized Context="Auth">
            @if (user == null)
            {
                <p>Wczytywanie...</p>
            }
            else
            {
                @if (currentUser == user.Username)
                {
                    <InputFile id="fileInput" OnChange="@HandleSelected" hidden multiple />
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               StartIcon="@Icons.Filled.Image"
                               for="fileInput">
                        Zmień Awatar
                    </MudButton>
                }
                <MudCardHeader>
                    @if (user.Avatar == "")
                    {
                        <MudAvatar Style="height: 120px; width: 120px; font-size: 55px" Color="Color.Error">@user.Username.Substring(0, 1).ToUpper()</MudAvatar>
                    }
                    else
                    {
                        <MudAvatar Style="height: 120px; width: 120px;" Image="@user.Avatar" />
                    }
                    <MudText Style="margin-left: 12px;"><h3>@user.Username<br /></h3></MudText>
                </MudCardHeader>

                <h6>Data rejestracji: @user.RegistrationDate</h6>
                <h6>Data ostatniego logowania: @user.RecentLoginDate</h6>

                <MudTabs Style="width: 1200px" Elevation="4" Rounded="true" Color="@Color.Primary" AlwaysShowScrollButtons="true" PanelClass="pa-6">
                    <MudTabPanel Text=@NumberOfSkills OnClick="() => WhichShow(1)" />
                    <MudTabPanel Text=@NumberOfCommentsToSkills OnClick="() => WhichShow(2)" />
                    <MudTabPanel Text=@NumberOfAnswerComments OnClick="() => WhichShow(3)" />
                    <MudTabPanel Text=@NumberOfRatings OnClick="() => WhichShow(4)" />
                    <MudTabPanel Text=@NumberOfDiscussions OnClick="() => WhichShow(5)" />
                    <MudTabPanel Text=@NumberOfAnswersToDiscussionTopics OnClick="() => WhichShow(6)" />
                    <MudTabPanel Text=@NumberOfAnswersToDiscussionPosts OnClick="() => WhichShow(7)" />
                    <MudTabPanel Text=@NumberOfAchievements OnClick="() => WhichShow(8)" />
                </MudTabs>

                @switch (action)
                {
                    case 1:
                        <Skills SkillPosts="@skillPosts"></Skills>
                        break;
                    case 2:
                        <UserCommentsToSkills Comments="@userCommentsToSkills"></UserCommentsToSkills>
                        break;
                    case 3:
                        <UserAnswersToComments Comments="@userAnswersToComments"></UserAnswersToComments>
                        break;
                    case 4:
                        <UserGavedRatings UserRatings="@userRatings"></UserGavedRatings>
                        break;
                    case 5:
                        <Discussions discussions="@discs"></Discussions>
                        break;
                    case 6:
                        <UserPostsToDiscussionTopic Posts="@userPostsToDiscussionTopic"></UserPostsToDiscussionTopic>
                        break;
                    case 7:
                        <UserAnswersToPosts Posts="@userAnswersToPosts"></UserAnswersToPosts>
                        break;
                    case 8:
                        <Achievements achievements="@userAchievements"></Achievements>
                        break;
                }
            }
        </Authorized>
        <NotAuthorized>
            <p>Nie można wyświetlić strony niezalogowanym użytkownikom</p>
        </NotAuthorized>
    </AuthorizeView>
</div>
@code {
    [Parameter]
    public string Username { get; set; }
    private UserInformationVm user;
    private string currentUser { get; set; }
    public string FileUrl { get; set; }
    public string FileType { get; set; }
    UpdateAvatar model = new UpdateAvatar();
    private List<SkillPostDto> skillPosts { get; set; } = new List<SkillPostDto>();
    private List<UserCommentDto> comments { get; set; } = new List<UserCommentDto>();
    private List<UserDiscussionPostDto> posts { get; set; } = new List<UserDiscussionPostDto>();
    private List<DiscussionDto> discs { get; set; } = new List<DiscussionDto>();
    private List<UserGavedRatingDto> userRatings { get; set; } = new List<UserGavedRatingDto>();
    private List<UserCommentDto> userCommentsToSkills = new List<UserCommentDto>();
    private List<UserCommentDto> userAnswersToComments = new List<UserCommentDto>();
    private List<UserDiscussionPostDto> userPostsToDiscussionTopic = new List<UserDiscussionPostDto>();
    private List<UserDiscussionPostDto> userAnswersToPosts = new List<UserDiscussionPostDto>();
    private List<AchievementDto> userAchievements = new List<AchievementDto>();
    private int action = 1;
    private string NumberOfSkills;
    private string NumberOfCommentsToSkills;
    private string NumberOfAnswerComments;
    private string NumberOfRatings;
    private string NumberOfDiscussions;
    private string NumberOfAnswersToDiscussionTopics;
    private string NumberOfAnswersToDiscussionPosts;
    private string NumberOfAchievements;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = authState.User.Identity.Name;

        user = await Http.GetFromJsonAsync<UserInformationVm>($"api/users/{Username}");

        ListSkillPosts skills = new ListSkillPosts();
        skills = await Http.GetFromJsonAsync<ListSkillPosts>($"api/users/{Username}/skills");
        skillPosts = skills.SkillPosts.ToList();
        NumberOfSkills = skillPosts.Count + " Skills";

        ListUserComments userCom = new ListUserComments();
        userCom = await Http.GetFromJsonAsync<ListUserComments>($"api/users/{Username}/comments");
        comments = userCom.Comments.ToList();

        ListGavedRatings listRatings = new ListGavedRatings();
        listRatings = await Http.GetFromJsonAsync<ListGavedRatings>($"api/users/{Username}/ratings");
        userRatings = listRatings.Ratings.ToList();
        NumberOfRatings = userRatings.Count + " Wystawionych ocen";

        foreach (var com in comments)
        {
            if (com.MainParentCommentId == null)
            {
                userCommentsToSkills.Add(com);
            }
            else
            {
                userAnswersToComments.Add(com);
            }
        }
        NumberOfCommentsToSkills = userCommentsToSkills.Count + " Komentarzy do Skill Posts";
        NumberOfAnswerComments = userAnswersToComments.Count + " Odpowiedzi do komentarzy";

        ListDiscussions listDiscs = new ListDiscussions();
        listDiscs = await Http.GetFromJsonAsync<ListDiscussions>($"api/users/{Username}/discussions");
        discs = listDiscs.Discussions.ToList();
        NumberOfDiscussions = discs.Count + " Dyskusji";

        ListUserDiscussionPosts userPosts = new ListUserDiscussionPosts();
        userPosts = await Http.GetFromJsonAsync<ListUserDiscussionPosts>($"api/users/{Username}/discussionPosts");
        posts = userPosts.DiscussionPosts.ToList();

        foreach (var post in posts)
        {
            if (post.MainParentPostId == null)
            {
                userPostsToDiscussionTopic.Add(post);
            }
            else
            {
                userAnswersToPosts.Add(post);
            }
        }

        NumberOfAnswersToDiscussionTopics = userPostsToDiscussionTopic.Count + " Odpowiedzi do tematu dyskusji";
        NumberOfAnswersToDiscussionPosts = userAnswersToPosts.Count + " Odpowiedzi do innych postów w dyskusji";

        ListAchievements achievements = new ListAchievements();
        achievements = await Http.GetFromJsonAsync<ListAchievements>($"api/users/{Username}/achievements");
        userAchievements = achievements.Achievements.ToList();
        userAchievements.OrderBy(a => a.Category);
        NumberOfAchievements = userAchievements.Count + " Osiągnięć";
    }

    private void WhichShow(int num)
    {
        action = num;
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        FileType = file.ContentType;
        if (file == null)
            return;
        using (var ms = file.OpenReadStream(file.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(file.Size)), FileType, file.Name);
            var response = await Http.PostAsync("api/upload/avatar", content);
            FileUrl = await response.Content.ReadAsStringAsync();
            user.Avatar = FileUrl;
            Snackbar.Add("Avatar został zmieniony pomyślnie");

            model.Username = user.Username;
            model.Avatar = user.Avatar;
            var modelJson = JsonSerializer.Serialize(model, new JsonSerializerOptions { WriteIndented = true });
            var content1 = new StringContent(modelJson, Encoding.UTF8, "application/json");
            await Http.PutAsync("api/users/update-avatar", content1);
        }
    }
}
